"""This module contains the :class:`Core` class, plus some support functions."""

import os
import imp
import pygame

from script_api import ScriptAPI


def make_file_map(path):
    """Generates a 'file map' which is simply a ``dict``; the keys are
    basenames without path information, the values are full absolute paths.
    These files are found by searching ``path`` recursively.
    
    If two or more files have the same basename, only one will be included
    in the file map; whichever was found last. Search order is undefined, so
    duplicate basenames should be avoided."""
    file_map = {}

    for path, dirs, files in os.walk(path):
        for filename in files:
            file_map[filename] = os.path.abspath(os.path.join(path, filename))

    return file_map


class Core:
    """This class handles logistical tasks like locating and loading game assets.
    All of the methods below use a file map generated by :func:`make_file_map`
    to locate files, therefore ``fn`` should be a basename only with
    no path information."""
    def __init__(self, data_dir, save_dir):
        self.running = True
        self.ready = False

        self.file_map = make_file_map(data_dir)
        self.cache = {}
        
        self.pending_script_files = [val for val in self.file_map.values() if val.endswith(".py")]
        self.pending_script_files.sort()
        self.script_api = ScriptAPI(self)

        self.screen = pygame.display.get_surface()

        self.current_music = None

    def fast_step(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                print("CORE says: Canceled load because user closed window.")
                self.running = False

        if self.ready:
            self.running = False

    def step(self):
        self.fast_step()

        if len(self.pending_script_files) > 0:
            curr_script = self.pending_script_files.pop(0)
            self.load_script(curr_script)
        else:
            self.ready = True

    def load_script(self, path):
        try:
            script_module = imp.load_source("script_module", path)
            script_module.main(self.script_api)
        except ImportError:
            print "CORE: Script Loader: Import failed for {}".format(path)
        except AttributeError:
            print "CORE: Script Loader: Script lacks main() {}".format(path)
        except TypeError:
            print "CORE: Script Loader: main() TypeError {}".format(path)

    ### Resource loading methods

    def get_path(self, fn):
        """Returns the absolute path to the file named ``fn``."""
        return self.file_map[fn]

    def get_image(self, fn):
        """Returns a ``pygame.Surface`` loaded from the file named ``fn``."""
        key = ("image", fn)

        if key not in self.cache:
            self.cache[key] = pygame.image.load(self.file_map[fn]).convert_alpha()

        return self.cache[key]

    def get_sound(self, fn):
        """Returns a ``pygame.Sound`` loaded from the file named ``fn``."""
        key = ("sound", fn)

        if key not in self.cache:
            self.cache[key] = pygame.mixer.Sound(self.file_map[fn])
            self.cache[key].set_volume(0.5)

        return self.cache[key]

    def get_font(self, fn):
        """Returns a ``font.Font`` loaded from the file named ``fn``."""
        from font import Font

        key = ("font", fn)

        if key not in self.cache:
            self.cache[key] = Font(self.get_image(fn))

        return self.cache[key]

    def get_image_flipped(self, fn, h=True, v=False):
        """Returns a flipped version of the ``pygame.Surface`` returned by ``self.get_image(fn)``."""
        key = ("image_flipped", fn, h, v)

        if key not in self.cache:
            image = self.get_image(fn)
            self.cache[key] = pygame.transform.flip(image, h, v)

        return self.cache[key]

    def get_tiles(self, fn, cols, rows):
        """Returns a list of cols*rows ``pygame.Surface`` instances, which are
        subsurfaces of the ``pygame.Surface`` returned by ``self.get_image(fn)``.
        The cols and rows args define how to subdivide the original image."""
        key = ("tiles", fn, cols, rows)

        if key not in self.cache:
            surface = self.get_image(fn)

            tw = surface.get_width() // cols
            th = surface.get_height() // rows

            tiles = []

            for row in xrange(rows):
                for col in xrange(cols):
                    tiles.append(surface.subsurface((col * tw, row * th, tw, th)))

            self.cache[key] = tiles

        return self.cache[key]

    def play_music(self, fn):
        """Starts playing the music file named ``fn`` if it is not already playing."""
        if self.current_music != fn:
            pygame.mixer.music.load(self.file_map[fn])
            pygame.mixer.music.set_volume(0.5)
            pygame.mixer.music.play(-1)
            self.current_music = fn

    def stop_music(self):
        """Stops whatever music is currently playing. Safe to call when no music is playing."""
        pygame.mixer.music.stop()
        self.current_music = None
